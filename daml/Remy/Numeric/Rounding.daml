{-# LANGUAGE AllowAmbiguousTypes #-}

module Remy.Numeric.Rounding
  ( RoundingMode(..)
  , round
  ) where

import DA.Numeric
import qualified DA.Map as M
import qualified DA.Optional as O
import Prelude hiding
  ( Down
  , round
  )

data RoundingMode =
    RoundingUp
  | RoundingDown
  | RoundingCeling
  | RoundingFloor
  | RoundingHalfUp
  | RoundingHalfDown
  | RoundingHalfEven
  | RoundingUnnecessary

zero : Numeric 37
zero = 0.0

one : Numeric 0
one = 1.0

delta : Numeric 37
delta = shift one

roundHalfEven : forall n. NumericScale n => Numeric 37 -> Numeric n
roundHalfEven x = castAndRound @n x

roundCeling : forall n. NumericScale n => Numeric 37 -> Numeric n
roundCeling x =
   if (x <= cast r) then
    r
  else
    r + shift one
  where
    r = roundHalfEven x

roundFloor : forall n. NumericScale n => Numeric 37 -> Numeric n
roundFloor x =
    if (cast r <= x) then
      r
    else
      r - shift one
    where
      r = roundHalfEven x

roundUp : forall n. NumericScale n => Numeric 37 -> Numeric n
roundUp x =
    if (zero <= x) then
      roundCeling x
    else
      roundFloor x

roundDown : forall n. NumericScale n => Numeric 37 -> Numeric n
roundDown x =
    if (zero <= x) then
      roundFloor x
    else
      roundCeling x

roundHalfCeling : forall n. NumericScale n => Numeric 37 -> Numeric n
roundHalfCeling x =
    if (x <= cast r) then
      r
    else
      roundHalfEven (x + delta)
    where
      r = roundHalfEven x

roundHalfFloor : forall n. NumericScale n => Numeric 37 -> Numeric n
roundHalfFloor x =
    if (cast r <= x) then
      r
    else
      roundHalfEven (x - delta)
    where
      r = roundHalfEven x

roundHalfUp : forall n. NumericScale n => Numeric 37 -> Numeric n
roundHalfUp x =
    if (zero <= x) then
     roundHalfCeling x
    else
      roundHalfFloor x

roundHalfDown : forall n. NumericScale n => Numeric 37 -> Numeric n
roundHalfDown x =
  if (zero <= x) then
    roundFloor x
  else
    roundCeling x

roundUnnecessary : forall n. NumericScale n => Numeric 37 -> Numeric n
roundUnnecessary =
  cast

round' : forall n. NumericScale n => RoundingMode -> Numeric 37 -> Numeric 37
round' RoundingUp x = cast $ roundUp @n x
round' RoundingDown x = cast $ roundDown @n x
round' RoundingCeling x = cast $ roundCeling @n x
round' RoundingFloor x = cast $ roundFloor @n x
round' RoundingHalfUp x = cast $ roundHalfUp @n x
round' RoundingHalfDown x = cast $ roundHalfDown @n x
round' RoundingHalfEven x = cast $ roundHalfEven @n x
round' RoundingUnnecessary x = cast $ roundUnnecessary @n x

roundMap : M.Map  Int (RoundingMode -> Numeric 37 -> Numeric 37)
roundMap = M.fromList
  [ (0, round' @0)
  , (1, round' @1)
  , (2, round' @2)
  , (3, round' @3)
  , (4, round' @4)
  , (5, round' @5)
  , (6, round' @6)
  , (7, round' @7)
  , (8, round' @8)
  , (9, round' @9)
  , (10, round' @10)
  , (11, round' @11)
  , (12, round' @12)
  , (13, round' @13)
  , (14, round' @14)
  , (15, round' @15)
  , (16, round' @16)
  , (17, round' @17)
  , (18, round' @18)
  , (19, round' @19)
  , (20, round' @20)
  , (21, round' @21)
  , (22, round' @22)
  , (23, round' @23)
  , (24, round' @24)
  , (25, round' @25)
  , (26, round' @26)
  , (27, round' @27)
  , (28, round' @28)
  , (29, round' @29)
  , (30, round' @30)
  , (31, round' @31)
  , (32, round' @32)
  , (33, round' @33)
  , (34, round' @34)
  , (35, round' @35)
  , (36, round' @36)
  , (37, const identity)
  ]

round: forall n. NumericScale n => RoundingMode -> Int -> Numeric n -> Numeric n
round m i x =
    shift $ (O.fromSome $ M.lookup (37 - (numericScale @n) + i) roundMap) m (shift x)
